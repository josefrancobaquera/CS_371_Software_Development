/**

   Name: Jose Franco Baquera
   Date: November 29, 2018
   CS371 - Software Development
   File Name: Errors.txt
   Purpose of File: Describes the errors found, which test cases found
   them, and how they were fixed.

**/

***********************************************************************************************************************************************
    The first error I found was located in the Circle class inside the moveBy method (i.e. more specifically, originally on line 46). This line of code adds
the x offset to the y coordinate (center.y = center.y + xOffset;), which is incorrect! The following two test cases found this particular error:

   // Test a simple positive move. That is, this test case 
   // will test if a circle can move in the 
   // "positive" direction.  
   @Test
   public void simpleMove() {
   
      Point p;
      System.out.println("Running test simpleMove.");
      p = circle1.moveBy(5, 6);
      assertTrue(p.x == 6 && p.y == 8);
   
   } // end simpleMove function.
 
   // Test a simple negative move. That is, this test case 
   // will test if a circle can move in the 
   // "negative" direction.
   @Test
   public void simpleMoveNeg() {
   
      Point p;
      System.out.println("Running test simpleMoveNeg.");
      p = circle1.moveBy(-5,-6);
      assertTrue(p.x == -4 && p.y == -4 );
   
   } // end simpleMoveNeg function.

To fix the error, I changed line 46 to the following: center.y = center.y + yOffset; That is, we want to add the y offset (not the x offset)
to the y coordinate. This change made my two previously mentioned test cases work correctly. 
***********************************************************************************************************************************************
    The second error I found was located in the Circle class inside the scale method (i.e. more specifically, originally on line 33). This line of code
adds the scale to the circle's radius instead of multiplying it (i.e. radius = radius + factor;), which is incorrect! The following 
two test cases found this particular error:

   // Test a positive scaling. That is, we want to test 
   // whether or not we can scale the circle more than 100%. 
   // The resulting new radius of the circle should be
   // greater than its original. 
   @Test
   public void scalePositive( ) {
      
      System.out.println("Running test scalePositive.");
      assertTrue(circle1.scale(2) == 6);
      
   } // end scalePositive function.
   
   // Test negative scaling. That is, we want to test whether or not we 
   // can scale the circle by less than 100%. The resulting new
   // radius of the circle should be less than its original. 
   @Test
   public void scaleNegative() {
   
      System.out.println("Running test scaleNegative.");
      assertTrue(circle2.scale(0.5) == 2);
   
   } // end scaleNegative function. 

To fix the error, I changed line 33 to the following: radius = radius*factor; That is, we want to update the radius of the circle so that 
its new value is the product between its old radius and the scaling factor. 
***********************************************************************************************************************************************
    The third error I found was located in the Circle1 class inside the intersects method (i.e. more specifically, the error was found
originally on lines 12 and 13). These two lines of code contained an if statement that had incorrect mathematical procedures. The original if 
statement did work for finding intersections between two circles and finding whether or not two circles that are NOT contained within each
other intersect. However, the original if statement failed when one circle contained another circle in its entirely (i.e. even though one
was "inside" the other one, their edges did not intersect). The following test case found this particular error:

   // Test that two circles do not intersect (i.e. one 
   // circle contains the other circle and their edges
   // do not intersect). If one circle contains another 
   // circle in its totality, then no edges should intersect.
   @Test
   public void containedNoIntersect()  {
   
	   System.out.println("Running containedNoIntersect test");
	   assertFalse(circle1.intersects(circle4));
   
   } // end containedNoIntersect function. 

To fix the error, I changed lines 12 and 13 and added the following if statement:

    if ( (Math.pow(radius - other.radius, 2) <= Math.pow(center.x - other.center.x, 2) +  Math.pow(center.y - other.center.y, 2) )
       && (Math.pow(center.x - other.center.x, 2) + Math.pow(center.y - other.center.y, 2) <= Math.pow(radius+other.radius, 2) ) )

This particular equation was found on the internet and works for all circles!!!!
***********************************************************************************************************************************************
    The fourth error I found was located in the Circle2 class inside the constructor method (i.e. more specifically, the error was found
originally in line 8). This line of code (i.e. super(y,x,radius);) had the x and y variables switched. That is, 
the x coordinate should go first, then the y coordinate, then lastly the circle's radius. The following two test cases helped me found
this particular error:  

   // Test a simple positive move. That is, this test case 
   // will test if a circle can move in the 
   // "positive" direction.
   @Test
   public void simpleMove() {
   
      Point p;
      System.out.println("Running test simpleMove.");
      p = circle1.moveBy(5, 6);
      assertTrue(p.x == 6 && p.y == 8);
   
   } // end simpleMove function.
 
   // Test a simple negative move. That is, this test case 
   // will test if a circle can move in the 
   // "negative" direction.
   @Test
   public void simpleMoveNeg() {
   
      Point p;
      System.out.println("Running test simpleMoveNeg.");
      p = circle1.moveBy(-5,-6);
      assertTrue(p.x == -4 && p.y == -4 );
   
   } // end simpleMoveNeg function.

To fix the error, I simply switched the locations of both the y and x variables (i.e. the new line of code is: super(x,y,radius);). 
***********************************************************************************************************************************************
    The fifth and last error I found was located in the Circle2 class inside the intersects method (i.e. more specifically, the error was found
originally on lines 16 and 14). Line 14 contained an extra Math.pow call that was not needed while line 16 contained an if statement that had 
some parts missing in its conditional check. The following test case found this particular error:

   // Test that two circles do not intersect (i.e. one 
   // circle contains the other circle and their edges
   // do not intersect). If one circle contains another 
   // circle in its totality, then no edges should intersect.
   @Test
   public void containedNoIntersect()  {
   
	   System.out.println("Running containedNoIntersect test");
	   assertFalse(circle1.intersects(circle4));
   
   } // end containedNoIntersect function. 

To fix the error, I changed line 16 to the following if statement: 

    if ( (Math.pow(radius - other.radius, 2) <= d) && (Math.pow(radius+other.radius, 2) <= d))
        
Furthermore, I deleted the extra Math.pow function call that was not needed. Once these changes were made, 
all test cases successfully passed!
***********************************************************************************************************************************************
